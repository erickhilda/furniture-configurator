/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { GLTF } from "three-stdlib";
import {
  ContactShadows,
  Environment,
  useGLTF,
  useTexture,
} from "@react-three/drei";
import { Canvas, useFrame } from "@react-three/fiber";
import { easing } from "maath";

export default function ChairHero({
  selectedColor,
}: {
  selectedColor: string;
}) {
  return (
    <Canvas shadows camera={{ position: [0, 2, 4], fov: 45 }}>
      <ambientLight intensity={0.5} />
      <Environment files="https://dl.polyhaven.org/file/ph-assets/HDRIs/hdr/1k/potsdamer_platz_1k.hdr" />
      <CameraRig>
        <Model
          selectedColor={selectedColor}
          position={[0, -0.78, 0]}
          scale={1.5}
        />
      </CameraRig>

      <ContactShadows
        position={[0, -0.8, 0]}
        opacity={0.9}
        scale={10}
        blur={1.5}
        far={0.8}
        color={selectedColor}
      />
    </Canvas>
  );
}

function CameraRig({ children }: { children: React.ReactNode }) {
  const group = useRef<THREE.Group>(null!);
  useFrame((state, delta) => {
    easing.damp3(state.camera.position, [0, 2, 4], 0.25, delta);
    easing.dampE(
      group.current.rotation,
      [state.pointer.y / 10, -state.pointer.x / 5, 0],
      0.25,
      delta
    );
  });
  return <group ref={group}>{children}</group>;
}

type GLTFResult = GLTF & {
  nodes: {
    legs: THREE.Mesh;
    cushions: THREE.Mesh;
    back: THREE.Mesh;
    supports: THREE.Mesh;
    base: THREE.Mesh;
  };
  materials: {
    wire_002049060: THREE.MeshStandardMaterial;
    wire_196010216: THREE.MeshStandardMaterial;
  };
};

type ChairGroup = JSX.IntrinsicElements["group"];
interface ChairProps extends ChairGroup {
  selectedColor: string;
}

function Model({ selectedColor, ...rest }: ChairProps) {
  const ref = useRef<THREE.Group>(null!);
  const { nodes, materials } = useGLTF("/model/chair.glb") as GLTFResult;

  const woodTexture = useTexture({ map: "/img/texture/wood_.jpg" });

  useEffect(() => {
    ref.current.traverse((child) => {
      if (child instanceof THREE.Mesh && child.name !== "") {
        if (child.name !== "cushions") {
          // loop through textures and change the wrapped texture
          Object.values(woodTexture).forEach((texture) => {
            texture.wrapS = THREE.RepeatWrapping;
            texture.wrapT = THREE.RepeatWrapping;
          });
          const newMaterial = new THREE.MeshStandardMaterial({
            map: woodTexture.map,
          });
          child.material = newMaterial;
        }
      }
    });
  }, [woodTexture]);

  useFrame((state) => {
    const t = state.clock.getElapsedTime();
    ref.current.rotation.y = Math.PI * 2.75;
  });

  return (
    <group {...rest} ref={ref} dispose={null}>
      <mesh
        name="legs"
        castShadow
        receiveShadow
        geometry={nodes.legs.geometry}
        material={materials.wire_002049060}
        rotation={[-Math.PI, 0, -Math.PI]}
        scale={0.096}
      />
      <mesh
        name="cushions"
        castShadow
        receiveShadow
        geometry={nodes.cushions.geometry}
        material={materials.wire_196010216}
        material-color={selectedColor}
        rotation={[-Math.PI, 0, -Math.PI]}
        scale={0.096}
      />
      <mesh
        name="back"
        castShadow
        receiveShadow
        geometry={nodes.back.geometry}
        material={materials.wire_002049060}
        rotation={[-Math.PI, 0, -Math.PI]}
        scale={0.096}
      />
      <mesh
        name="supports"
        castShadow
        receiveShadow
        geometry={nodes.supports.geometry}
        material={nodes.supports.material}
        rotation={[-Math.PI, 0, -Math.PI]}
        scale={0.096}
      />
      <mesh
        name="base"
        castShadow
        receiveShadow
        geometry={nodes.base.geometry}
        material={materials.wire_002049060}
        rotation={[-Math.PI, 0, -Math.PI]}
        scale={0.096}
      />
    </group>
  );
}

useGLTF.preload("/model/chair.glb");
